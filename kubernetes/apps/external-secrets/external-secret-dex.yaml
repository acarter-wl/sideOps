# Example: kubernetes/apps/argo-system/argo-cd/external-secret-dex.yaml
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: dex-authentik-secret     # Name of the K8s secret to create
  namespace: argo-system          # Namespace where Dex/Argo CD runs
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: k8s                    # Your ClusterSecretStore name for 1Password
    kind: ClusterSecretStore
  target:
    name: dex-authentik-secret     # K8s secret name must match the one in dex.extraEnv
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        # Key in the K8s secret: Value from the template variable below
        client-secret: "{{ .authentik_client_secret }}" # Matches the key name used in dex.extraEnv
  data:
    - secretKey: authentik_client_secret # Template variable name
      remoteRef:
        # === ADJUST THESE BASED ON YOUR 1PASSWORD SETUP ===
        key: "authentik-argocd-credentials" # <<< NAME of the Login/Password item in 1Password
        property: "password"                # <<< NAME of the field within the 1Password item (e.g., password, clientSecret, notes field label)
        # ====================================================
