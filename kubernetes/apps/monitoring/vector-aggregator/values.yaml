role: "Stateless-Aggregator"

customConfig:
  data_dir: /vector-data-dir

  # Sources
  sources:
    # Vector input for receiving logs from Vector agents
    vector_in:
      type: vector
      address: 0.0.0.0:6000
      version: "2"

    # For Vector's internal metrics
    internal_metrics:
      type: internal_metrics

  # Transforms
  transforms:
    # Route logs by type
    route_logs:
      type: route
      inputs:
        - vector_in
      route:
        kubernetes:
          type: vrl
          source: |
            .log_type == "kubernetes"
        talos_kernel:
          type: vrl
          source: |
            .log_type == "talos_kernel"
        talos_service:
          type: vrl
          source: |
            .log_type == "talos_service"
        unmatched:
          type: vrl
          source: |
            true

    # Kubernetes logs processing
    kubernetes_final:
      type: remap
      inputs:
        - route_logs.kubernetes
      source: |
        # Set timestamp
        .timestamp = now()

        # Ensure required fields exist
        if !exists(.pod) {
          .pod = "unknown"
        }
        if !exists(.namespace) {
          .namespace = "unknown"
        }
        if !exists(.container) {
          .container = "unknown"
        }
        if !exists(.node) {
          .node = "unknown"
        }

    # Talos kernel logs processing
    talos_kernel_final:
      type: remap
      inputs:
        - route_logs.talos_kernel
      source: |
        # Set timestamp
        .timestamp = now()

        # Ensure facility exists
        if !exists(.facility) {
          .facility = "kernel"
        }

    # Talos service logs processing
    talos_service_final:
      type: remap
      inputs:
        - route_logs.talos_service
      source: |
        # Set timestamp
        .timestamp = now()

        # Ensure service exists
        if !exists(.service) {
          .service = "unknown"
        }
        # Ensure component exists for labeling
        if !exists(.component) {
          .component = .service ?? "unknown_service_component"
        }

        # Process message content if available
        if exists(.msg) {
          msg_str = to_string(.msg) ?? ""

          # Check for machined service logs
          if contains(msg_str, "machined") {
            .service = "machined"

            # Try to extract API call using Talos-style format
            parsed = parse_regex(msg_str, r'\[(?P<api_call>/[^]]+)\]') ?? {}
            if exists(parsed.api_call) {
              .api_call = parsed.api_call
            }
          }
        }

    # Process unmatched logs
    unmatched_logs:
      type: remap
      inputs:
        - route_logs.unmatched
      source: |
        # Set timestamp
        .timestamp = now()

        # Default log type
        .log_type = "unmatched"
        # Ensure component exists for labeling
        if !exists(.component) {
          .component = "unknown_unmatched_component"
        }

        if exists(.component) && .component == "dns-resolve-cache" {
          .log_type = "talos_service"
          .service = "dns"
        }

  # Sinks
  sinks:
    # Loki sinks for different log types
    loki_kubernetes:
      type: loki
      inputs:
        - kubernetes_final
      endpoint: "http://loki.monitoring.svc.cluster.local:3100/loki/api/v1/push"
      labels:
        app: '{{ .pod_labels.app }}'
        "app.kubernetes.io/component": '{{ .pod_labels."app.kubernetes.io/component" }}'
        "app.kubernetes.io/instance": '{{ .pod_labels."app.kubernetes.io/instance" }}'
        "app.kubernetes.io/name": '{{ .pod_labels."app.kubernetes.io/name" }}'
        "app.kubernetes.io/part-of": '{{ .pod_labels."app.kubernetes.io/part-of" }}'
        "app.kubernetes.io/version": '{{ .pod_labels."app.kubernetes.io/version" }}'
        cluster: '{{ .kubernetes.cluster_name }}'
        container: '{{ .container }}'
        k8s_app: '{{ .kubernetes.pod_labels.app }}'
        namespace: '{{ .namespace }}'
        node: '{{ .node }}'
        pod: '{{ .pod }}'
        stream: '{{ .stream }}'
        vector_source: 'kubernetes'
      encoding:
        codec: json
      batch:
        max_bytes: 1048576 # 1MB
        timeout_secs: 1
      out_of_order_action: "accept"
      remove_label_fields: true
      remove_timestamp: true

    loki_talos_kernel:
      type: loki
      inputs:
        - talos_kernel_final
      endpoint: "http://loki.monitoring.svc.cluster.local:3100/loki/api/v1/push"
      labels:
        cluster: '{{ .kubernetes.cluster_name }}'
        facility: '{{ .facility }}'
        log_type: '{{ .log_type }}'
        node: '{{ .node }}'
        vector_source: 'talos_kernel'
      encoding:
        codec: json
      batch:
        max_bytes: 1048576 # 1MB
        timeout_secs: 1
      out_of_order_action: "accept"
      remove_label_fields: true
      remove_timestamp: true

    loki_talos_service:
      type: loki
      inputs:
        - talos_service_final
        - unmatched_logs
      endpoint: "http://loki.monitoring.svc.cluster.local:3100/loki/api/v1/push"
      labels:
        cluster: '{{ .kubernetes.cluster_name }}'
        component: '{{ .component }}'
        log_type: '{{ .log_type }}'
        node: '{{ .node }}'
        service: '{{ .service }}'
        vector_source: 'talos_service'
      encoding:
        codec: json
      batch:
        max_bytes: 1048576 # 1MB
        timeout_secs: 1
      out_of_order_action: "accept"
      remove_label_fields: true
      remove_timestamp: true

    # Prometheus metrics for Vector itself
    prometheus:
      type: prometheus_exporter
      inputs:
        - internal_metrics
      address: 0.0.0.0:9598

replicas: 2

podDisruptionBudget:
  minAvailable: 1

service:
  ports:
    - name: vector-ingress
      port: 6000
      targetPort: 6000
      protocol: TCP
    - name: prom-exporter
      port: 9598
      targetPort: 9598
      protocol: TCP

resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 200m
    memory: 512Mi