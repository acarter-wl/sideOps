role: "Stateless-Aggregator"

customConfig:
  data_dir: /vector-data-dir

  sources:
    vector_in:
      type: vector
      address: 0.0.0.0:6000
      version: "2"

    internal_metrics:
      type: internal_metrics

  transforms:
    route_logs:
      type: route
      inputs:
        - vector_in
      route:
        kubernetes:
          type: vrl
          source: |
            .log_type == "kubernetes"
        talos_kernel:
          type: vrl
          source: |
            .log_type == "talos_kernel"
        talos_service:
          type: vrl
          source: |
            .log_type == "talos_service"
        unmatched:
          type: vrl
          source: |
            true

    kubernetes_final:
      type: remap
      inputs:
        - route_logs.kubernetes
      source: |
        .timestamp = now()

    talos_kernel_final:
      type: remap
      inputs:
        - route_logs.talos_kernel
      source: |
        .timestamp = now()

    talos_service_final:
      type: remap
      inputs:
        - route_logs.talos_service
      source: |
        .timestamp = now()
        if !exists(.service) {
          .service = "unknown"
        }

        if exists(.msg) {
          msg_str = to_string(.msg) ?? ""

          if contains(msg_str, "MachineService") {
            .service = "machined"
            parts = split!(msg_str, "[")
            if length(parts) >= 2 {
              api_part_array = split!(parts[1], "]")
              if length(api_part_array) > 0 {
                api_part = api_part_array[0]
                if length(api_part) > 0 {
                  .api_call = api_part
                }
              }
            }
          }

          duration_match = parse_regex(msg_str, r'(?P<duration>\d+\.\d+)(Âµ|m|n)?s') ?? {}
          if exists(duration_match.duration) {
            .duration = to_float(duration_match.duration) ?? 0.0
          }
        }

    unmatched_logs:
      type: remap
      inputs:
        - route_logs.unmatched
      source: |
        .timestamp = now()
        .log_type = "unmatched"

        if exists(.msg) {
          msg = to_string(.msg) ?? ""
          if contains(msg, "machined") {
            .log_type = "talos_service"
            .service = "machined"
          }
        }

        if exists(.component) && .component == "dns-resolve-cache" {
          .log_type = "talos_service"
          .service = "dns"
        }

    all_logs_agg:
      type: remap
      inputs:
        - kubernetes_final
        - talos_kernel_final
        - talos_service_final
        - unmatched_logs
      source: |
        .timestamp = now()
        .source = "aggregator"

  sinks:
    loki_kubernetes:
      type: loki
      inputs:
        - kubernetes_final
      endpoint: "http://loki-gateway"
      encoding:
        codec: json
      labels:
        pod: "{{`{{ pod }}`}}"
        namespace: "{{`{{ namespace }}`}}"
        container: "{{`{{ container }}`}}"
        node: "{{`{{ node }}`}}"
        log_type: "kubernetes"
      batch:
        max_bytes: 2097152
        timeout_secs: 5
      out_of_order_action: rewrite_timestamp

    loki_talos_kernel:
      type: loki
      inputs:
        - talos_kernel_final
      endpoint: "http://loki-gateway"
      encoding:
        codec: json
        except_fields:
          - __host
      labels:
        hostname: "{{`{{ node }}`}}"
        facility: "{{`{{ facility }}`}}"
        log_type: "talos_kernel"
      batch:
        max_bytes: 2097152
        timeout_secs: 5
      out_of_order_action: rewrite_timestamp

    loki_talos_service:
      type: loki
      inputs:
        - talos_service_final
        - unmatched_logs
      endpoint: "http://loki-gateway"
      encoding:
        codec: json
        except_fields:
          - __host
      labels:
        hostname: "{{`{{ node }}`}}"
        service: "{{`{{ service }}`}}"
        component: "{{`{{ component }}`}}"
        log_type: "{{`{{ log_type }}`}}"
      batch:
        max_bytes: 1048576
        timeout_secs: 5
      out_of_order_action: rewrite_timestamp

    stdout:
      type: console
      inputs:
        - all_logs_agg
      encoding:
        codec: json

    prometheus:
      type: prometheus_exporter
      inputs:
        - internal_metrics
      address: 0.0.0.0:9598

replicas: 2

podDisruptionBudget:
  minAvailable: 1

service:
  ports:
    - name: vector-ingress
      port: 6000
      targetPort: 6000
      protocol: TCP
    - name: prom-exporter
      port: 9598
      targetPort: 9598
      protocol: TCP

resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 200m
    memory: 512Mi
