namespaceOverride: monitoring
nameOverride: kube-prometheus-stack
fullnameOverride: kube-prometheus-stack

global:
  rbac:
    create: true

crds:
  enabled: true
  upgradeJob:
    enabled: false

# ================================
# ETCD Scraping for Talos
# ======================
kubeEtcd:
  enabled: true
  endpoints:
    - 192.168.101.120
    - 192.168.101.121
    - 192.168.101.122
  service:
    enabled: true
    port: 2379
    targetPort: 2379
    ipDualStack:
      enabled: false
  serviceMonitor:
    scheme: https
    insecureSkipVerify: false
    serverName: localhost
    caFile: /etc/prometheus/secrets/etcd-certs/etcd-ca.crt
    certFile: /etc/prometheus/secrets/etcd-certs/etcd-client.crt
    keyFile: /etc/prometheus/secrets/etcd-certs/etcd-client-key.key

prometheus:
  enabled: true
  scrapeInterval: 30s
  evaluationInterval: 30s
  resources:
    requests:
      memory: 2Gi
      cpu: 1000m
    limits:
      memory: 4Gi
      cpu: 2000m
  prometheusSpec:
    secrets:
      - etcd-certs
    serviceMonitorSelectorNilUsesHelmValues: false
    serviceMonitorSelector:
      matchLabels:
        release: kube-prometheus-stack
    retentionDuration: "90d"
    retentionSize: "90GB"
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: ceph-block
          accessModes: [ "ReadWriteOnce" ]
          resources:
            requests:
              storage: 100Gi
    replicas: 1
  additionalServiceMonitors:
    - name: loki
      selector:
        matchLabels:
          app.kubernetes.io/name: loki
      namespaceSelector:
        matchNames:
          - monitoring
      endpoints:
        - port: http-metrics
          interval: 15s
          path: /metrics
    - name: promtail
      selector:
        matchLabels:
          app.kubernetes.io/name: promtail
      namespaceSelector:
        matchNames:
          - monitoring
      endpoints:
        - port: http-metrics
          interval: 15s
          path: /metrics

  ingress:
    enabled: true
    ingressClassName: internal
    annotations:
      kubernetes.io/ingress.class: internal
      internal-dns.alpha.kubernetes.io/enabled: "true"
      cert-manager.io/cluster-issuer: "letsencrypt-production"
      secret.reloader.stakater.com/reload: gateway-monitor
    hosts:
      - prometheus.wakkalabs.com
    path: /
    tls:
      - secretName: prometheus-wakkalabs-tls
        hosts:
          - prometheus.wakkalabs.com

# ================================
# Alertmanager Configuration
# ================================
alertmanager:
  replicas: 2
  service:
    ipFamilyPolicy: SingleStack
    ipFamilies:
      - IPv4
  config:
    global:
      resolve_timeout: 5m
    route:
      group_by: [ 'job', 'alertname', 'namespace' ]
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 12h
      receiver: 'null'
      routes:
        - match:
            alertname: Watchdog
          receiver: 'null'
        - match:
            severity: critical
          receiver: 'discord-critical'
          continue: true
        - match:
            severity: warning
          receiver: 'discord-warnings'
    receivers:
      - name: 'discord-critical'
        webhook_configs:
          - url: >-
              https://discord.com/api/webhooks/1355431526891786240/5KSnlY0KPdx7dRsSL0yJDaZYNzVktheQz1PXNoX9-eCIlZP2MFZcM67PtFRTRa4ZwJ_a
            send_resolved: true
      - name: 'discord-warnings'
        webhook_configs:
          - url: >-
              https://discord.com/api/webhooks/1355379117692027012/y6Sxl2G-D4hqr8TQVL8rT1HRb1n_h2e8x7nQoNbSDZz_8cGYII2ZVeziLxujkFjkm89X
            send_resolved: true
    templates:
      - '/etc/alertmanager/config/*.tmpl'
  ingress:
    enabled: true
    ingressClassName: internal
    annotations:
      kubernetes.io/ingress.class: internal
      internal-dns.alpha.kubernetes.io/enabled: "true"
      cert-manager.io/cluster-issuer: "letsencrypt-production"
      secret.reloader.stakater.com/reload: gateway-monitor
    hosts:
      - alertmanager.wakkalabs.com
    path: /
    tls:
      - secretName: alertmanager-wakkalabs-tls
        hosts:
          - alertmanager.wakkalabs.com

  defaultRules:
    create: true
    rules:
      alertmanager: true
      etcd: true
      kubeApiserver: true
      kubePrometheusNodeAlerting: true
      kubePrometheusNodeRecording: true
      kubernetesSystem: true
      kubernetesResources: true
      kubeControllerManager: true
      kubeScheduler: true
      kubernetesStorage: true
      prometheusOperator: true

kubeControllerManager:
  service:
    ipFamilyPolicy: SingleStack
    ipFamilies:
      - IPv4

kubeScheduler:
  service:
    ipFamilyPolicy: SingleStack
    ipFamilies:
      - IPv4

# ================================
# Grafana Configuration
# ================================
grafana:
  enabled: true
  admin:
    existingSecret: grafana-admin-credentials
    userKey: admin-user
    passwordKey: admin-password
  defaultDashboardsEnabled: true
  defaultDashboardsTimezone: "America/Chicago"
  defaultDashboardsEditable: true
  sidecar:
    dashboards:
      enabled: true
      label: grafana_dashboard
      folder: /tmp/dashboards
      searchNamespace: ALL
  ingress:
    enabled: true
    ingressClassName: internal
    annotations:
      kubernetes.io/ingress.class: internal
      internal-dns.alpha.kubernetes.io/enabled: "true"
      cert-manager.io/cluster-issuer: "letsencrypt-production"
      secret.reloader.stakater.com/reload: gateway-monitor
    hosts:
      - grafana.wakkalabs.com
    path: /
    tls:
      - secretName: grafana-wakkalabs-tls
        hosts:
          - grafana.wakkalabs.com
  persistence:
    enabled: true
    type: pvc
    accessModes:
      - ReadWriteOnce
    size: 100Gi
    storageClassName: ceph-block
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Loki
          type: loki
          uid: Loki
          access: proxy
          editable: true
          url: http://loki-gateway.monitoring.svc.cluster.local:3100
          jsonData: {}

  additionalDataSources:
    - name: Loki
      type: loki
      uid: Loki
      access: proxy
      url: http://loki-gateway.monitoring.svc.cluster.local:3100
      jsonData:
        maxLines: 1000
        timeout: 30
        derivedFields:
          - datasourceUid: Tempo # If you add Tempo later for tracing
            matcherRegex: "traceID=(\\w+)"
            name: TraceID
            url: "$${__value.raw}"
    - name: Tempo
      type: tempo
      uid: tempo
      access: proxy
      url: http://tempo.monitoring.svc.cluster.local:3100
      jsonData:
        httpMethod: GET
        tracesToLogs:
          datasourceUid: 'Loki'
          tags: [ 'instance', 'pod', 'namespace' ]
          mappedTags: [ { key: 'service.name', value: 'service' } ]
          mapTagNamesEnabled: false
          spanStartTimeShift: '-1h'
          spanEndTimeShift: '1h'
          filterByTraceID: true
          filterBySpanID: false
        serviceMap:
          datasourceUid: 'prometheus'
        search:
          hide: false
        nodeGraph:
          enabled: true
        lokiSearch:
          datasourceUid: 'Loki'

  # Add pre-configured dashboards for Loki
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: 'default'
          orgId: 1
          folder: ''
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/default

  # Define dashboards
  dashboards:
    default:
      loki-logs:
        url: https://grafana.com/api/dashboards/13639/revisions/1/download
        datasource: Loki
      kubernetes-pod-logs:
        url: https://grafana.com/api/dashboards/15141/revisions/1/download
        datasource: Loki
      talos-monitoring:
        url: https://grafana.com/api/dashboards/14058/revisions/1/download
        datasource: Prometheus
      node-exporter:
        url: https://grafana.com/api/dashboards/1860/revisions/27/download
        datasource: Prometheus
