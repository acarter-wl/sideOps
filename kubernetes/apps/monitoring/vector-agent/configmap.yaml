apiVersion: v1
kind: ConfigMap
metadata:
  name: vector-config
  namespace: monitoring
data:
  vector.yaml: |
    data_dir: /vector-data-dir

    sources:
      kubernetes_logs:
        type: kubernetes_logs
        self_node_name: ${VECTOR_SELF_NODE_NAME}

      talos_kernel_logs:
        address: 0.0.0.0:6050
        type: socket
        mode: udp
        max_length: 102400
        decoding:
          codec: json
        host_key: __host

      talos_service_logs:
        address: 0.0.0.0:6051
        type: socket
        mode: udp
        max_length: 102400
        decoding:
          codec: json
        host_key: __host

      internal_metrics:
        type: internal_metrics

    transforms:
      kubernetes_logs_size_limiter:
        type: remap
        inputs: [kubernetes_logs]
        source: |
          # Limit message size to 200KB to stay under Loki's limit
          if exists(.message) && .message != null && is_string(.message) {
            message_length = length(.message)
            if message_length > 200000 {
              # Keep metadata with condensed message for logs that are too large
              .message = slice(.message, 0, 200000) + " ... [truncated, original size: " + to_string(message_length) + " bytes]"
            }
          }

      kubernetes_logs_transform:
        type: remap
        inputs: [kubernetes_logs_size_limiter]
        source: |
          .container = .kubernetes.container_name
          .pod = .kubernetes.pod_name
          .namespace = .kubernetes.pod_namespace
          # This is still ok because get_env_var("HOSTNAME") can fail
          .node = get_env_var("HOSTNAME") ?? "unknown"
          .log_type = "kubernetes"
          .timestamp = now()

      talos_kernel_transform:
        type: remap
        inputs: [talos_kernel_logs]
        source: |
          .node = .__host
          # Use if/else expression for explicit default value assignment
          .facility = if exists(.facility) && .facility != null { .facility } else { "kernel" }
          .log_type = "talos_kernel"
          .timestamp = now()

      talos_kernel_transform_remove_host:
        type: remap
        inputs: [talos_kernel_transform]
        source: |
          # Remove __host field
          del(.__host)

      talos_service_transform:
        type: remap
        inputs: [talos_service_logs]
        source: |
          .node = .__host
          # Use if/else expression for explicit default value assignment
          .service = if exists(.service) && .service != null { .service } else { "talos-service" }
          if exists(.msg) {
            msg = to_string(.msg) ?? ""
            if contains(msg, "machined") {
              .service = "machined"
            } else if contains(msg, "containerd") {
              .service = "containerd"
            } else if contains(msg, "kubelet") {
              .service = "kubelet"
            } else if contains(msg, "apid") {
              .service = "apid"
            } else if contains(msg, "trustd") {
              .service = "trustd"
            }
          }
          .log_type = "talos_service"
          .timestamp = now()

      talos_service_transform_remove_host:
        type: remap
        inputs: [talos_service_transform]
        source: |
          # Remove __host field
          del(.__host)

    sinks:
      loki_kubernetes:
        type: loki
        inputs: [kubernetes_logs_transform]
        endpoint: http://loki-gateway.monitoring.svc/loki/api/v1/push
        encoding:
          codec: json
        labels:
          pod: "{{ pod }}"
          namespace: "{{ namespace }}"
          container: "{{ container }}"
          node: "{{ node }}"
          log_type: "kubernetes"
        batch:
          max_bytes: 512000        # Reduced from 1MB to 512KB
          timeout_secs: 5
          max_events: 100          # Add event count limit
        request:
          retry_attempts: 3        # Add retries
          retry_initial_backoff_secs: 1
          retry_max_duration_secs: 10
          rate_limit_num: 10       # Rate limit requests
          rate_limit_duration_secs: 1
        out_of_order_action: rewrite_timestamp

      loki_talos_kernel:
        type: loki
        inputs: [talos_kernel_transform_remove_host]
        endpoint: http://loki-gateway.monitoring.svc/loki/api/v1/push
        encoding:
          codec: json
        labels:
          hostname: "{{ node }}"
          facility: "{{ facility }}"
          log_type: "talos_kernel"
        batch:
          max_bytes: 512000
          timeout_secs: 5
          max_events: 100
        request:
          retry_attempts: 3
          retry_initial_backoff_secs: 1
          retry_max_duration_secs: 10
          rate_limit_num: 10
          rate_limit_duration_secs: 1
        out_of_order_action: rewrite_timestamp

      loki_talos_service:
        type: loki
        inputs: [talos_service_transform_remove_host]
        endpoint: http://loki-gateway.monitoring.svc/loki/api/v1/push
        encoding:
          codec: json
        labels:
          hostname: "{{ node }}"
          service: "{{ service }}"
          log_type: "talos_service"
        batch:
          max_bytes: 512000
          timeout_secs: 5
          max_events: 100
        request:
          retry_attempts: 3
          retry_initial_backoff_secs: 1
          retry_max_duration_secs: 10
          rate_limit_num: 10
          rate_limit_duration_secs: 1
        out_of_order_action: rewrite_timestamp

      stdout:
        type: console
        inputs:
          - kubernetes_logs_transform
          - talos_kernel_transform_remove_host
          - talos_service_transform_remove_host
        encoding:
          codec: json

      prometheus:
        type: prometheus_exporter
        inputs:
          - internal_metrics
        address: "0.0.0.0:9598"
