# tempo-values.yaml
# Deploy Tempo in monolithic mode for simplicity

# Global settings
global:
  clusterDomain: kubernetes

# Tempo server configuration
tempo:
  repository: grafana/tempo
  tag: latest
  pullPolicy: IfNotPresent
  replicas: 1

  # Resource configuration
  resources:
    requests:
      cpu: 200m
      memory: 512Mi
    limits:
      cpu: 1000m
      memory: 2Gi

  # Tempo configuration
  tempoConfig:
    search_enabled: true
    metrics_generator:
      registry:
        external_labels:
          source: tempo
          cluster: talos-cluster
      storage:
        path: /var/tempo/generator/wal
        remote_write:
          - url: http://prometheus.monitoring.svc.cluster.local:9090/api/v1/write
            send_exemplars: true
    storage:
      trace:
        backend: local
        wal:
          path: /var/tempo/wal
        local:
          path: /var/tempo/blocks
    server:
      http_listen_port: 3100
    distributor:
      receivers:
        jaeger:
          protocols:
            thrift_http:
              endpoint: 0.0.0.0:14268
            grpc:
              endpoint: 0.0.0.0:14250
            thrift_binary:
              endpoint: 0.0.0.0:6832
            thrift_compact:
              endpoint: 0.0.0.0:6831
        zipkin:
          endpoint: 0.0.0.0:9411
        otlp:
          protocols:
            grpc:
              endpoint: 0.0.0.0:4317
            http:
              endpoint: 0.0.0.0:4318
    ingester:
      trace_idle_period: 10s
      max_block_bytes: 1_000_000
      max_block_duration: 5m

# Storage configuration for Tempo blocks
persistence:
  enabled: true
  storageClass: ceph-block
  size: 50Gi

# Service configuration to expose Tempo
service:
  type: ClusterIP
  annotations: {}
  labels: {}
  port: 3100

# ServiceMonitor for Prometheus integration
serviceMonitor:
  enabled: true
  labels:
    release: kube-prometheus-stack

# Integration with Grafana
extraEnv:
  - name: JAEGER_AGENT_TAGS
    value: "cluster=kubernetes"
