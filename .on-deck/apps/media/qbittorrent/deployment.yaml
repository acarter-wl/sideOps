apiVersion: apps/v1
kind: Deployment
metadata:
  name: qbittorrent
  namespace: media
  labels:
    app.kubernetes.io/name: qbittorrent
spec:
  replicas: 1
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: qbittorrent
  template:
    metadata:
      labels:
        app.kubernetes.io/name: qbittorrent
    spec:
      terminationGracePeriodSeconds: 30
      securityContext:
        fsGroup: 0
      # without this external DNS lookups fail with my setup (api.radarr.video => api.radarr.video.matthew-stratton.me)
      # https://pracucci.com/kubernetes-dns-resolution-ndots-options-and-why-it-may-affect-application-performances.html
      dnsConfig:
        options:
          - name: ndots
            value: "1"
      containers:
        # https://hub.docker.com/r/linuxserver/qbittorrent/tags
        - name: qbittorrent
          image: hotio/qbittorrent:release-5.0.4
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 0
            runAsGroup: 0
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 1000m
              memory: 512Mi
          env:
            - name: PUID
              value: "0"
            - name: PGID
              value: "0"
          envFrom:
            - configMapRef:
                name: qbittorrent-vpn-config
                optional: false
          ports:
            - containerPort: 8080
              name: web-ui
              protocol: TCP
            - containerPort: 6881
              name: torrent-tcp
              protocol: TCP
            - containerPort: 6881
              name: torrent-udp
              protocol: UDP
          volumeMounts:
            - mountPath: "/config"
              name: qbittorrent-config
            - mountPath: /downloads
              name: data
        # to test its working start a debug pod and run `curl https://ipinfo.io` and you should not see your home IP address
        # > kubectl -n media exec -it `kubectl -n media get pods -l app.kubernetes.io/name=qbittorrent -o name` -- bash
        # > curl https://ipinfo.io
        - name: gluetun
          # https://hub.docker.com/r/qmcgaw/gluetun/tags
          image: ghcr.io/qdm12/gluetun:v3.40
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 256Mi
          securityContext:
            capabilities:
              add:
                - NET_ADMIN
          envFrom:
            - configMapRef:
                name: qbittorrent-vpn-config
                optional: false
            - secretRef:
                name: qbittorrent-vpn-credentials
                optional: false
          ports:
            - containerPort: 9999
              name: gluetun-health
              protocol: TCP
          volumeMounts:
            - name: tunnel
              mountPath: /dev/net/tun
              #livenessProbe:
              #  httpGet:
              #    path: /
              #    port: 9999
              #  initialDelaySeconds: 30
              #  timeoutSeconds: 30
              #readinessProbe:
              #  httpGet:
              #    path: /
              #    port: 9999
              #  initialDelaySeconds: 30
              #  timeoutSeconds: 10
      volumes:
        - name: qbittorrent-config
          persistentVolumeClaim:
            claimName: qbittorrent-config
        - name: data
          persistentVolumeClaim:
            claimName: downloads-ceph
        - name: tunnel
          hostPath:
            path: /dev/net/tun
---
apiVersion: v1
kind: Service
metadata:
  name: qbittorrent
  namespace: media
  labels:
    app.kubernetes.io/name: qbittorrent
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: qbittorrent
  ports:
    - name: http
      port: 8080
    - name: torrent-tcp
      port: 6881
      protocol: TCP
    - name: torrent-udp
      port: 6881
      protocol: UDP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: qbittorrent
  namespace: media
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-production"
    gethomepage.dev/enabled: "true"
    gethomepage.dev/description: Torrent Client
    gethomepage.dev/group: Media
    gethomepage.dev/icon: qbittorrent.png
    gethomepage.dev/name: qbittorrent
    gethomepage.dev/widget.type: "qbittorrent"
    gethomepage.dev/widget.url: "https://qbittorrent.wakkalabs.com"
  labels:
    app.kubernetes.io/name: qbittorrent
spec:
  ingressClassName: internal
  tls:
    - hosts:
        - qbittorrent.wakkalabs.com
      secretName: qbittorrent-tls
  rules:
    - host: qbittorrent.wakkalabs.com
      http:
        paths:
          - backend:
              service:
                name: qbittorrent
                port:
                  number: 8080
            path: /
            pathType: Prefix
